// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
// Max
// Matteo
package org.usfirst.frc308.FRC2016.subsystems;

import org.usfirst.frc308.FRC2016.Robot;
import org.usfirst.frc308.FRC2016.RobotConstants;
import org.usfirst.frc308.FRC2016.RobotMap;
import org.usfirst.frc308.FRC2016.commands.teleopShooter;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class Shooter extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private final CANTalon shootMotor1 = RobotMap.shootershootMotor1;
	private final CANTalon shootMotor2 = RobotMap.shootershootMotor2;
	private final DigitalInput highOpticalSensor = RobotMap.highopticalsensor;
	private final DigitalInput lowOpticalSensor = RobotMap.lowopticalsensor;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	private final Solenoid shooterLift = RobotMap.pneumaticsshooterLift;
	private final Solenoid shooterBaffle = RobotMap.pneumaticsshooterBaffle;
	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		setDefaultCommand(new teleopShooter());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public void displayOpticalSensorData() {
		SmartDashboard.putBoolean("high sensor", highOpticalSensor.get());
		SmartDashboard.putBoolean("low sensor", lowOpticalSensor.get());
		SmartDashboard.putNumber("shooter speed", shootMotor1.getEncVelocity());
		SmartDashboard.putNumber("shooter error", shootMotor1.getError());
	}

	/**
	 * sets the lift up or down
	 * 
	 * @param setpoint
	 *            true to set it up, false to set it down
	 */
	public void setLift(boolean setpoint) {
		shooterLift.set(setpoint);
	}

	/**
	 * sets up shooter without PID
	 */
	public void setupShooter() {
		shootMotor1.changeControlMode(TalonControlMode.Speed);
		shootMotor1.setProfile(0);
		shootMotor1.setPID(RobotConstants.shooterPIDKp, RobotConstants.shooterPIDKi, RobotConstants.shooterPIDKd,
				RobotConstants.shooterPIDKf, RobotConstants.shooterPIDIZone, RobotConstants.shooterPIDRampRate, 0);
		shootMotor2.changeControlMode(TalonControlMode.Follower);
		shootMotor2.set(10);

	}

	public boolean isOnTarget(double targetSpeed) {
		if(Math.abs(RobotConstants.shooterSpeed
				- Robot.shooter.shootMotor1.getEncVelocity()) < RobotConstants.shooterTolerance) {
			return true;
		} else {
			return false;
		}
	}
	/**
	 * shoots the ball
	 */
	public void shootBallHigh() {
		/*
		 * if shooter not up to speed and both optical sensors are true, then
		 * set shootMotor to shooterSpeed
		 * 
		 * else if current shooter speed is within shootingTolerance , then set
		 * intakeMotor to intakeShooterSpeed
		 * 
		 * else set shootMotor 0
		 */

		/* ADD PNEUMATIC OBJECT AND CODE TO TO LOCK THE SHOOTING BAFFLE */

		if (Math.abs(RobotConstants.shooterSpeed
				- Robot.shooter.shootMotor1.getEncVelocity()) >= RobotConstants.shooterTolerance
				&& (highOpticalSensor.get() == true && lowOpticalSensor.get() == true)) {// TODO
																							// make
																							// false
			Robot.shooter.shootMotor1.set(RobotConstants.shooterSpeed);
		} else if (Math.abs(RobotConstants.shooterSpeed
				- Robot.shooter.shootMotor1.getEncVelocity()) < RobotConstants.shooterTolerance) {
		} else {
			Robot.shooter.shootMotor1.set(0);
		}
	}
	public void setMotorSpeed(double revUpMotor) {
		Robot.shooter.shootMotor1.set(revUpMotor);
	}
	/**
	 * sets the shooter power
	 * 
	 * @param power
	 *            the power to shoot, from -1.0 to 1.0
	 */
	public void setShootPower(double power) {
		shootMotor1.set(power);
	}

	/**
	 * Sets shooting baffle up or down
	 * 
	 * @param state
	 *            true = up false = down
	 */
	public void setBaffle(boolean state) {
		Robot.shooter.shooterBaffle.set(state);

	}
}
